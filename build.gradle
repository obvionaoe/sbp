buildscript {
    ext {
        kotlin_version = '1.4.10'
        protobuf_version = '0.8.13'
        grpc_version = '1.33.0'
        protoc_version = '3.12.0'
        junit_version = '4.12'
        java_version = '1.8'
        kotlinter_version = '3.2.0'
        jooq_version = '3.14.1'
        sqlite_version = '3.32.3.2'
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version")
    }
}

plugins {
    id("org.jetbrains.kotlin.jvm") version "$kotlin_version"
    id("com.google.protobuf") version "$protobuf_version"
    id("org.jmailen.kotlinter") version "$kotlinter_version"
    id("application")
}

group 'pt.obvionaoe'
version '1.0'
sourceCompatibility = "1.8"

repositories {
    mavenCentral()
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protoc_version"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpc_version"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

sourceSets {
    main.kotlin {
        srcDirs 'build/generated/source/proto/main/grpc'
        srcDirs 'build/generated/source/proto/main/java'
    }
}

dependencies {
    // Kotlin
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlin_version")

    // GRPC
    implementation("io.grpc:grpc-netty-shaded:$grpc_version")
    implementation("io.grpc:grpc-protobuf:$grpc_version")
    implementation("io.grpc:grpc-stub:$grpc_version")

    // DB
    implementation("org.jooq:jooq:$jooq_version")
    implementation("org.xerial:sqlite-jdbc:$sqlite_version")

    // Test
    testImplementation("junit:junit:$junit_version")
}

compileKotlin {
    kotlinOptions.jvmTarget = "$java_version"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "$java_version"
}

// kotlin linter and formatter options

kotlinter {
    ignoreFailures = false
    indentSize = 4
    reporters = ["checkstyle", "plain"]
    experimentalRules = true
    disabledRules = ["no-wildcard-imports", "indent", "parameter-list-wrapping"]
}

// tasks for creating the start scripts for the server and both clients

startScripts.enabled = false

task brokerServer(type: CreateStartScripts) {
    mainClassName = 'pt.obvionaoe.broker.BrokerServer'
    applicationName = 'broker-server'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task subscriberClient(type: CreateStartScripts) {
    mainClassName = 'pt.obvionaoe.subscriber.SubscriberClient'
    applicationName = 'subscriber-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

task publisherClient(type: CreateStartScripts) {
    mainClassName = 'pt.obvionaoe.publisher.PublisherClient'
    applicationName = 'publisher-client'
    outputDir = new File(project.buildDir, 'tmp')
    classpath = startScripts.classpath
}

applicationDistribution.into('bin') {
    from(brokerServer)
    from(subscriberClient)
    from(publisherClient)
    fileMode = 0755
}